"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHash = exports.createMention = exports.createHashtag = exports.createLocation = exports.createLinkAttachment = exports.createVideoLink = exports.createVideoAttachment = exports.createImageLink = exports.createImageAttachment = exports.createAudioLink = exports.createAudioAttachment = exports.createProfile = exports.createNote = void 0;
const hash_1 = require("./utilities/hash");
/**
 * createNote() provides a simple factory for generating an ActivityContentNote
 * object.
 *
 * @param content - The text content to include in the note
 * @param options - Overrides default fields for the ActivityContentNote
 * @returns An ActivityContentNote object
 */
const createNote = (content, options) => ({
    "@context": "https://www.w3.org/ns/activitystreams",
    type: "Note",
    mediaType: "text/plain",
    content,
    ...options,
});
exports.createNote = createNote;
/**
 * createProfile() provides a simple factory for generating an
 * ActivityContentProfile object.
 *
 * @param options - Overrides any default fields for the ActivityContentProfile
 * @returns An ActivityContentProfile object
 */
const createProfile = (options) => ({
    "@context": "https://www.w3.org/ns/activitystreams",
    type: "Profile",
    ...options,
});
exports.createProfile = createProfile;
/**
 * createAudioAttachment() provides a simple factory for generating an
 * ActivityContentAudio object.
 *
 * @param links - An array of ActivityContentAudioLink objects to include
 * @param options - Overrides any default fields for the ActivityContentAudio
 * @returns An ActivityContentAudio object
 */
const createAudioAttachment = (links, options) => ({
    type: "Audio",
    url: links,
    ...options,
});
exports.createAudioAttachment = createAudioAttachment;
/**
 * createAudioLink() provides a simple factory for generation an
 * ActivityContentAudioLink object for inclusion in an ActivityContentAudio
 * object.
 *
 * @param href      - The URL of the file
 * @param mediaType - The MIME type of the file (see SUPPORTED_AUDIO_MEDIA_TYPES within validation.ts)
 * @param hash      - An ActivityContentHash object to authenticate the file
 * @param options - Overrides any default fields for the ActivityContentAudioLink
 * @returns An ActivityContentAudioLink object
 */
const createAudioLink = (href, mediaType, hash, options) => ({
    type: "Link",
    href,
    mediaType,
    hash,
    ...options,
});
exports.createAudioLink = createAudioLink;
/**
 * createImageAttachment() provides a simple factory for generating an
 * ActivityContentImage object.
 *
 * @param links - An array of ActivityContentImageLink objects to include
 * @param options - Overrides any default fields for the ActivityContentImage
 * @returns An ActivityContentImage object
 */
const createImageAttachment = (links, options) => ({
    type: "Image",
    url: links,
    ...options,
});
exports.createImageAttachment = createImageAttachment;
/**
 * createImageLink() provides a simple factory for generation an
 * ActivityContentImageLink object for inclusion in an ActivityContentImage
 * object.
 *
 * @param href      - The URL of the file
 * @param mediaType - The MIME type of the file (see SUPPORTED_IMAGE_MEDIA_TYPES within validation.ts)
 * @param hash      - An ActivityContentHash object to authenticate the file
 * @param options - Overrides any default fields for the ActivityContentImageLink
 * @returns An ActivityContentImageLink object
 */
const createImageLink = (href, mediaType, hash, options) => ({
    type: "Link",
    href,
    mediaType,
    hash,
    ...options,
});
exports.createImageLink = createImageLink;
/**
 * createVideoAttachment() provides a simple factory for generating an
 * ActivityContentVideo object.
 *
 * @param links - An array of ActivityContentVideoLink objects to include
 * @param options - Overrides any default fields for the ActivityContentVideo
 * @returns An ActivityContentVideo object
 */
const createVideoAttachment = (links, options) => ({
    type: "Video",
    url: links,
    ...options,
});
exports.createVideoAttachment = createVideoAttachment;
/**
 * createVideoLink() provides a simple factory for generation an
 * ActivityContentVideoLink object for inclusion in an ActivityContentVideo
 * object.
 *
 * @param href      - The URL of the file
 * @param mediaType - The MIME type of the file (see SUPPORTED_VIDEO_MEDIA_TYPES within validation.ts)
 * @param hash      - An ActivityContentHash object to authenticate the file
 * @param options - Overrides any default fields for the ActivityContentVideoLink
 * @returns An ActivityContentVideoLink object
 */
const createVideoLink = (href, mediaType, hash, options) => ({
    type: "Link",
    href,
    mediaType,
    hash,
    ...options,
});
exports.createVideoLink = createVideoLink;
/**
 * createLinkAttachment() provides a simple factory for generating an
 * ActivityContentLink object.
 *
 * @param href - The URL to include in the link
 * @param options - Overrides any default fields for the ActivityContentLink
 * @returns An ActivityContentLink object
 */
const createLinkAttachment = (href, options) => ({
    type: "Link",
    href,
    ...options,
});
exports.createLinkAttachment = createLinkAttachment;
/**
 * createLocation() provides a simple factory for generating an
 * ActivityContentLocation object.
 *
 * @param name - This is the string provided for name of the Location
 * @param options - Overrides any default fields for the ActivityContentLocation
 * @returns An ActivityContentLocation object
 */
const createLocation = (name, options) => ({
    type: "Place",
    name,
    ...options,
});
exports.createLocation = createLocation;
/**
 * createHashtag() provides a simple factory for generating an
 * ActivityContentHashtag object.
 *
 * @param name - The hashtag value, without "#" character
 * @returns An ActivityContentTag object
 */
const createHashtag = (name) => ({
    name,
});
exports.createHashtag = createHashtag;
/**
 * createMention() provides a simple factory for generating an
 * ActivityContentMention object.
 *
 * @param id - The DSNPUserId of the mention user
 * @param options - Any additional fields for the ActivityContentMention
 * @returns An ActivityContentMention object
 */
const createMention = (id, options) => ({
    type: "Mention",
    id,
    ...options,
});
exports.createMention = createMention;
/**
 * createHash() provides a simple factory for generating an ActivityContentHash
 * object. This factory assumes the user intends to use a standard Keccak256
 * hash. To use other authentication algorithms, users should build their own
 * ActivityContentHash objects.
 *
 * @param content - The file content to be hashed
 * @returns An ActivityContentHash containing the keccak256 proof of the content
 */
const createHash = (content) => ({
    algorithm: "keccak256",
    value: (0, hash_1.hash)(content),
});
exports.createHash = createHash;
