import { ActivityContentNote, ActivityContentProfile, ActivityContentAttachment } from "./factories";
/**
 * isDSNPUserURI validates a given object as a DSNPUserURI.
 *
 * @param uri - The object to validate
 * @returns True of false depending on whether the string is a valid DSNPUserURI
 */
export declare const isDSNPUserURI: (uri: unknown) => uri is string;
/**
 * requireActivityContentAttachment validates an unknown object and returns it
 * as an ActivityContentAttachment type if valid, and throws an error if not.
 *
 * @param obj - the object to convert
 */
export declare const requireToActivityContentAttachment: (obj: unknown) => ActivityContentAttachment;
/**
 * requireActivityContentNoteType() is a type check function for ActivityContentNote
 * objects. Note that this function only checks that the given object meets the
 * first-level type definition of an ActivityContentNote. It **does not** perform
 * deeper type validations or any logic
 * validations, such as checking the format of string fields or checking that
 * required attachments each include at least one supported format.
 *
 * @param obj - The object to check
 * @returns true if the object is an ActivityContentNote, otherwise throws an Error.
 * @throws InvalidActivityContentError if type checks fail.
 */
export declare const requireIsActivityContentNoteType: (obj: unknown) => obj is ActivityContentNote;
/**
 * isActivityContentNoteType is a non-throwing version of `requireIsActivityContentNoteType`
 * Performs the same checks but catches InvalidActivityContentError and returns false instead.
 *
 * @param obj - The object to check
 * @returns a boolean - indicating if the object is an ActivityContentNote
 */
export declare const isActivityContentNoteType: (obj: unknown) => obj is ActivityContentNote;
/**
 * requireIsActivityContentProfileType() is a type check function for
 * ActivityContentProfile objects. Note that this function only checks that the
 * given object meets the first-level type definition of an ActivityContentProfile. It
 * does not** perform deeper type validations or any logic validations, such as checking the format of
 * string fields or checking that the icon field includes at least one supported
 * image format.
 *
 * @param obj - The object to check
 * @returns true if the object is an ActivityContentProfile,otherwise throws an Error
 * @throws InvalidActivityContentError if type checks fail.
 */
export declare const requireIsActivityContentProfileType: (obj: unknown) => obj is ActivityContentProfile;
/**
 * isActivityContentProfileType is a non-throwing version of `requireIsActivityContentProfileType`.
 * Performs the same checks but catches InvalidActivityContentError and returns false instead.
 *
 * @param obj - The object to check
 * @returns a boolean - indicating if the object is an ActivityContentProfile
 */
export declare const isActivityContentProfileType: (obj: unknown) => obj is ActivityContentProfile;
/**
 * requireGetSupportedContentAttachments iterates over the provided list and returns
 * the valid+supported attachments. If the passed in obj is empty, returns an empty array.
 * If there are attachments but none of them are valid+supported, it throws an error.
 * Attachments MUST first pass a type check to be considered valid at all.
 *
 * @param obj - an array of unknown object types to check for validity
 * @returns an array of all valid ActivityContentAttachments
 * @throws InvalidActivityContentError if there are no valid attachments with
 * supported Link attachments.
 *
 * Examples:
 * 1. One Image attachment with one URL that points to a TIFF file throws an error.
 * 2. One Image attachment with two URLs, one that is a TIFF and the other is JPG,
 *    does not throw.
 * 3. One Image attachment with two URLs, both are JPG, but one has a malformed
 *    hash of 0xdeadbeef (it's too short), throws an error due to failing
 *    the type check.
 * 4. Two Image attachments, the one from #2 and the one from #3, does NOT throw and
 *    returns just #2.
 */
export declare const requireGetSupportedContentAttachments: (obj: Array<unknown>) => Array<ActivityContentAttachment>;
/**
 * requireValidActivityContentNote() validates that a given object meets all
 * necessary specification requirements for an ActivityContentNote object,
 * include string field formats and other logical validations. Note that this
 * function **does not** attempt to fetch any attachments to validate that their
 * hashes are correct.
 *
 * @param obj - The object to check
 * @returns true if valid
 * @throws InvalidActivityContentError if not valid, with a message
 */
export declare const requireValidActivityContentNote: (obj: unknown) => boolean;
/**
 * requireValidActivityContentProfile() validates that a given object meets all
 * necessary specification requirements for an ActivityContentProfile object,
 * include string field formats and other logical validations. Note that this
 * function **does not** attempt to fetch any icons to validate that their
 * hashes are correct.
 *
 * @param obj - The object to check
 * @returns true if valid.
 * @throws InvalidActivityContentError if not valid, with a message
 */
export declare const requireValidActivityContentProfile: (obj: unknown) => boolean;
